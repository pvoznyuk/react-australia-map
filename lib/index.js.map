{"version":3,"sources":["../src/index.js"],"names":["AustraliaMap","stateAbbreviation","props","onClick","state","style","customize","dataState","label","styles","fill","customStyle","stroke","strokeWidth","customLabelStyle","fontSize","textAnchor","fontFamily","clickHandler","bind","paths","stateKey","path","dimensions","styleProps","labelPosition","name","stateClickHandler","push","labels","showLabels","labelText","styleLabelProps","userSelect","cursor","split","map","item","index","Math","min","height","id","width","title","buildPaths","buildLabels","Component","propTypes","string","func","isRequired","oneOfType","number","bool","object","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport data from './data/australia-map-dimensions';\nimport State from './components/State';\n\nclass AustraliaMap extends React.Component {\n  clickHandler(stateAbbreviation) {\n    this.props.onClick(stateAbbreviation);\n  }\n\n  customStyle(state, style) {\n    if (this.props.customize && this.props.customize[state] && this.props.customize[state][style]) {\n      return this.props.customize[state][style];\n    }\n\n    return this.props[style];\n  }\n\n  customLabelStyle(state, style) {\n    const dataState = data[state].label;\n\n    if (this.props.customize &&\n        this.props.customize[state] &&\n        this.props.customize[state].label &&\n        this.props.customize[state].label[style]) {\n      return this.props.customize[state].label[style];\n    }\n\n    return dataState[style] || this.props.label[style] || null;\n  }\n\n  styleProps(state) {\n    const styles = {\n      fill: this.customStyle(state, 'fill'),\n      stroke: this.customStyle(state, 'stroke'),\n      strokeWidth: this.customStyle(state, 'strokeWidth')\n    };\n\n    if (styles.strokeWidth === 0) {\n      styles.stroke = styles.fill;\n      styles.strokeWidth = 1;\n    }\n\n    return styles;\n  }\n\n  styleLabelProps(state) {\n    return {\n      fill: this.customLabelStyle(state, 'fill'),\n      stroke: this.customLabelStyle(state, 'stroke'),\n      strokeWidth: this.customLabelStyle(state, 'strokeWidth'),\n      fontSize: this.customLabelStyle(state, 'fontSize'),\n      textAnchor: this.customLabelStyle(state, 'textAnchor'),\n      fontFamily: this.customLabelStyle(state, 'fontFamily')\n    };\n  }\n\n  stateClickHandler(state) {\n    if (this.props.customize &&\n        this.props.customize[state] &&\n        this.props.customize[state].clickHandler) {\n      return this.props.customize[state].clickHandler;\n    }\n    return this.clickHandler.bind(this);\n  }\n\n\n  buildPaths() {\n    const paths = [];\n\n    for (const stateKey in data) {\n      const path = (<State\n        dimensions={data[stateKey].dimensions}\n        {...this.styleProps(stateKey)}\n\n        showLabels={this.customStyle(stateKey, 'showLabels')}\n        labelPosition={data[stateKey].labelPosition}\n        label={data[stateKey].name}\n\n        key={stateKey}\n        onClickState={this.stateClickHandler(stateKey)}\n        state={stateKey}/>);\n\n      paths.push(path);\n    }\n    return paths;\n  }\n\n  buildLabels() {\n    const labels = [];\n\n    for (const stateKey in data) {\n      const showLabels = this.customStyle(stateKey, 'showLabels');\n\n      if (showLabels) {\n        const labelText = this.customLabelStyle(stateKey, 'name');\n\n        const label =\n          <text\n            key={stateKey}\n            state={stateKey}\n            x={this.customLabelStyle(stateKey, 'x')}\n            y={this.customLabelStyle(stateKey, 'y')}\n            {...this.styleLabelProps(stateKey)}\n            onClickState={this.stateClickHandler(stateKey)}\n            style={{ userSelect: 'none', cursor: 'default'}}\n          >\n            <tspan>\n              { labelText.split(\"\\n\").map((item, index) => {\n                return <tspan\n                  key={item}\n                  x={this.customLabelStyle(stateKey, 'x')}\n                  dy={`${Math.min(index, 1)}em`}>\n                  { item }\n                </tspan>;\n              })}\n            </tspan>\n          </text>;\n\n        labels.push(label);\n      }\n    }\n    return labels;\n  }\n\n  render() {\n    return (\n      <svg\n        className=\"au-state-map\"\n        height={this.props.height}\n        id={this.props.id || null}\n        viewBox=\"0 0 290 262\"\n        width={this.props.width}\n        xmlns=\"http://www.w3.org/2000/svg\">\n        <title>{this.props.title}</title>\n        <g className=\"outlines\">\n          {this.buildPaths()}\n          {this.buildLabels()}\n        </g>\n      </svg>\n    );\n  }\n}\n\nAustraliaMap.propTypes = {\n  id: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n  width: PropTypes.oneOfType[PropTypes.number, PropTypes.string],\n  height: PropTypes.oneOfType[PropTypes.number, PropTypes.string],\n  title: PropTypes.string,\n  fill: PropTypes.string,\n  stroke: PropTypes.string,\n  strokeWidth: PropTypes.number,\n  showLabels: PropTypes.bool,\n  label: PropTypes.object,\n  customize: PropTypes.object\n};\n\nAustraliaMap.defaultProps = {\n  onClick: () => {},\n  width: '100%',\n  height: 'auto',\n  fill: '#D3D3D3',\n  stroke: '#D3D3D3',\n  strokeWidth: 1,\n  title: 'Australia map',\n  showLabels: false,\n  label: {\n    textAnchor: 'middle',\n    fill: 'white',\n    fontSize: 11,\n    fontFamily: 'Verdana'\n  },\n  customize: {}\n};\n\nexport default AustraliaMap;\n"]}